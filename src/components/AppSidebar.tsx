import { useState } from "react"
import { 
  BarChart3, 
  BookOpen, 
  Users, 
  CreditCard, 
  User, 
  Settings,
  LogOut,
  Menu,
  Home,
  Star,
  Gift,
  Target,
  Gamepad2,
  Video,
  Briefcase
} from "lucide-react"
import { NavLink, useLocation } from "react-router-dom"
import { useAuth } from "@/contexts/AuthContext"
import { supabase } from "@/integrations/supabase/client"
import { useEffect } from "react"

import {
  Sidebar,
  SidebarContent,
  SidebarGroup,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarTrigger,
  useSidebar,
} from "@/components/ui/sidebar"

interface AppSidebarProps {
  userRole: string;
  membershipStatus: string;
  activeTab: string;
  onTabChange: (tab: string) => void;
}

export function AppSidebar({ userRole, membershipStatus, activeTab, onTabChange }: AppSidebarProps) {
  const { state } = useSidebar()
  const location = useLocation()
  const currentPath = location.pathname
  const { signOut } = useAuth()
  const isAdmin = userRole === 'admin'
  const isPremium = membershipStatus === 'premium'
  const isCollapsed = state === 'collapsed'

  const handleSignOut = async () => {
    await signOut()
  }

  const isActive = (tab: string) => activeTab === tab
  const getNavCls = (tab: string) =>
    isActive(tab) ? "bg-muted text-primary font-medium" : "hover:bg-muted/50"

  const handleNavClick = (tab: string) => {
    onTabChange(tab)
  }

  // ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
  const mainItems = [
    { title: "‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î", tab: "overview", icon: Home, emoji: "üè†" },
    { title: "‡∏ú‡∏•‡∏á‡∏≤‡∏ô", tab: "portfolio", icon: Star, emoji: "‚≠ê" },
  ]

  // ‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡πà‡∏¢‡∏° (‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô)
  const premiumItems = [
    { title: "‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå", tab: "courses", icon: BookOpen, emoji: "üìö" },
    { title: "Pattern Chart", tab: "pattern-chart", icon: Target, emoji: "üéØ" },
    { title: "Money Management", tab: "money-management", icon: BarChart3, emoji: "üí∞" },
    { title: "VIP Program", tab: "vip", icon: Gift, emoji: "üéÅ" },
  ]

  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin
  const adminItems = [
    { title: "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏£‡πå‡∏™", tab: "course-management", icon: BookOpen, emoji: "üìñ" },
    { title: "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", tab: "user-management", icon: Users, emoji: "üë•" },
    { title: "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏ä‡∏≥‡∏£‡∏∞", tab: "payment-confirmations", icon: CreditCard, emoji: "üí≥" },
    { title: "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", tab: "admin-members", icon: Users, emoji: "üëë" },
    { title: "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥", tab: "admin-report", icon: BarChart3, emoji: "üìä" },
  ]

  // BONUS
  const bonusItems = [
    { title: "Template ‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î", tab: "trading-template", icon: Target, emoji: "üìã" },
    { title: "VDO Backtest", tab: "vdo-backtest", icon: Video, emoji: "üé¨" },
  ]

  // ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
  const accountItems = [
    { title: "‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô", tab: "payment", icon: CreditCard, emoji: "üí∏" },
    { title: "‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå", tab: "profile", icon: User, emoji: "üë§" },
    { title: "Mindset", tab: "mindset", icon: User, emoji: "üß†" },
  ]

  return (
    <Sidebar
      className="bg-slate-900 border-slate-700"
      collapsible="icon"
    >
      <SidebarContent className="bg-slate-900">
        {/* Logo */}
        <div className="p-4 border-b border-slate-700">
          {!isCollapsed ? (
            <div className="flex items-center gap-2">
              <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
                <span className="text-white font-bold text-sm">AI</span>
              </div>
              <span className="text-white font-bold bg-gradient-to-r from-blue-400 via-purple-500 to-pink-500 bg-clip-text text-transparent animate-pulse">Stay Ready</span>
            </div>
          ) : (
            <div className="flex justify-center">
              <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
                <span className="text-white font-bold text-sm">AI</span>
              </div>
            </div>
          )}
        </div>

        {/* ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å */}
        <SidebarGroup>
          <SidebarGroupLabel className="text-slate-400">‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</SidebarGroupLabel>
          <SidebarGroupContent>
            <SidebarMenu>
              {mainItems.map((item) => (
                <SidebarMenuItem key={item.title}>
                  <SidebarMenuButton 
                    onClick={() => handleNavClick(item.tab)}
                    className={getNavCls(item.tab)}
                  >
                    <span className="text-lg filter-none emoji-no-filter" style={{ filter: 'none' }}>{item.emoji}</span>
                    {!isCollapsed && <span className="text-slate-300">{item.title}</span>}
                  </SidebarMenuButton>
                </SidebarMenuItem>
              ))}
            </SidebarMenu>
          </SidebarGroupContent>
        </SidebarGroup>

        {/* ‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡πà‡∏¢‡∏° - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡πà‡∏¢‡∏° */}
        {(isPremium || isAdmin) && (
          <SidebarGroup>
            <SidebarGroupLabel className="text-slate-400">‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡πà‡∏¢‡∏°</SidebarGroupLabel>
            <SidebarGroupContent>
              <SidebarMenu>
                {premiumItems.map((item) => (
                  <SidebarMenuItem key={item.title}>
                    <SidebarMenuButton 
                      onClick={() => handleNavClick(item.tab)}
                      className={getNavCls(item.tab)}
                    >
                      <span className="text-lg filter-none emoji-no-filter" style={{ filter: 'none' }}>{item.emoji}</span>
                      {!isCollapsed && <span className="text-slate-300">{item.title}</span>}
                    </SidebarMenuButton>
                  </SidebarMenuItem>
                ))}
              </SidebarMenu>
            </SidebarGroupContent>
          </SidebarGroup>
        )}

        {/* Admin - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö */}
        {isAdmin && (
          <SidebarGroup>
            <SidebarGroupLabel className="text-slate-400">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö</SidebarGroupLabel>
            <SidebarGroupContent>
              <SidebarMenu>
                {adminItems.map((item) => (
                  <SidebarMenuItem key={item.title}>
                    <SidebarMenuButton 
                      onClick={() => handleNavClick(item.tab)}
                      className={getNavCls(item.tab)}
                    >
                      <span className="text-lg filter-none emoji-no-filter" style={{ filter: 'none' }}>{item.emoji}</span>
                      {!isCollapsed && <span className="text-slate-300">{item.title}</span>}
                    </SidebarMenuButton>
                  </SidebarMenuItem>
                ))}
              </SidebarMenu>
            </SidebarGroupContent>
          </SidebarGroup>
        )}

        {/* BONUS */}
        <SidebarGroup>
          <SidebarGroupLabel className="text-slate-400">BONUS</SidebarGroupLabel>
          <SidebarGroupContent>
            <SidebarMenu>
              {bonusItems.map((item) => (
                <SidebarMenuItem key={item.title}>
                  <SidebarMenuButton 
                    onClick={() => handleNavClick(item.tab)}
                    className={getNavCls(item.tab)}
                  >
                    <span className="text-lg filter-none emoji-no-filter" style={{ filter: 'none' }}>{item.emoji}</span>
                    {!isCollapsed && <span className="text-slate-300">{item.title}</span>}
                  </SidebarMenuButton>
                </SidebarMenuItem>
              ))}
            </SidebarMenu>
          </SidebarGroupContent>
        </SidebarGroup>

        {/* ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ */}
        <SidebarGroup>
          <SidebarGroupLabel className="text-slate-400">‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</SidebarGroupLabel>
          <SidebarGroupContent>
            <SidebarMenu>
              {accountItems.map((item) => (
                <SidebarMenuItem key={item.title}>
                  <SidebarMenuButton 
                    onClick={() => handleNavClick(item.tab)}
                    className={getNavCls(item.tab)}
                  >
                    <span className="text-lg filter-none emoji-no-filter" style={{ filter: 'none' }}>{item.emoji}</span>
                    {!isCollapsed && <span className="text-slate-300">{item.title}</span>}
                  </SidebarMenuButton>
                </SidebarMenuItem>
              ))}
            </SidebarMenu>
          </SidebarGroupContent>
        </SidebarGroup>

        {/* ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö */}
        <SidebarGroup className="mt-auto">
          <SidebarGroupContent>
            <SidebarMenu>
              <SidebarMenuItem>
                <SidebarMenuButton onClick={handleSignOut} className="text-red-400 hover:bg-red-500/10">
                  <span className="text-lg filter-none emoji-no-filter" style={{ filter: 'none' }}>üî¥</span>
                  {!isCollapsed && <span>‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö</span>}
                </SidebarMenuButton>
              </SidebarMenuItem>
            </SidebarMenu>
          </SidebarGroupContent>
        </SidebarGroup>
      </SidebarContent>
    </Sidebar>
  )
}